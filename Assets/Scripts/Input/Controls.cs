//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""LevelSelect"",
            ""id"": ""48598c79-ecec-4cac-9248-7a76fd5c314c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""97a03c71-083f-49fb-a820-119fe0250203"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Selectlevel"",
                    ""type"": ""Button"",
                    ""id"": ""0292b6ab-2701-460e-af99-2590770b60a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e57107c-b872-4bcd-96a3-764054be1606"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""111e73ce-7c3d-48a0-bb70-4648af655629"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""600e1381-41c6-4ac3-b663-a1fc5bd9fc62"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4b7ca19b-4c72-405b-92d2-a94c74626eab"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b19644b5-230c-4ac1-b9ab-56bf17da911e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2f4a5594-aa8b-4294-8201-e331370ae02d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""21409dc1-ff2f-4524-9642-6ecf9494388b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selectlevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f967a31-5a29-48a1-a562-9c22052a6195"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selectlevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LevelSelect
        m_LevelSelect = asset.FindActionMap("LevelSelect", throwIfNotFound: true);
        m_LevelSelect_Movement = m_LevelSelect.FindAction("Movement", throwIfNotFound: true);
        m_LevelSelect_Selectlevel = m_LevelSelect.FindAction("Selectlevel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LevelSelect
    private readonly InputActionMap m_LevelSelect;
    private ILevelSelectActions m_LevelSelectActionsCallbackInterface;
    private readonly InputAction m_LevelSelect_Movement;
    private readonly InputAction m_LevelSelect_Selectlevel;
    public struct LevelSelectActions
    {
        private @Controls m_Wrapper;
        public LevelSelectActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_LevelSelect_Movement;
        public InputAction @Selectlevel => m_Wrapper.m_LevelSelect_Selectlevel;
        public InputActionMap Get() { return m_Wrapper.m_LevelSelect; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelSelectActions set) { return set.Get(); }
        public void SetCallbacks(ILevelSelectActions instance)
        {
            if (m_Wrapper.m_LevelSelectActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnMovement;
                @Selectlevel.started -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnSelectlevel;
                @Selectlevel.performed -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnSelectlevel;
                @Selectlevel.canceled -= m_Wrapper.m_LevelSelectActionsCallbackInterface.OnSelectlevel;
            }
            m_Wrapper.m_LevelSelectActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Selectlevel.started += instance.OnSelectlevel;
                @Selectlevel.performed += instance.OnSelectlevel;
                @Selectlevel.canceled += instance.OnSelectlevel;
            }
        }
    }
    public LevelSelectActions @LevelSelect => new LevelSelectActions(this);
    public interface ILevelSelectActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSelectlevel(InputAction.CallbackContext context);
    }
}
